#!/usr/bin/env python3
"""
Script to generate filesystem module using Monkey Coder itself.
This demonstrates Monkey Coder generating its own components.
"""

import asyncio
import os
from pathlib import Path
from dotenv import load_dotenv

# Add packages/core to path
import sys
sys.path.insert(0, 'packages/core')

from monkey_coder.core.agent_executor import AgentExecutor
from monkey_coder.providers import ProviderRegistry

# Load .env.local
env_path = Path('packages/core/.env.local')
if env_path.exists():
    load_dotenv(env_path)
    print(f'Loaded {env_path}')

async def generate_filesystem_module():
    """Use Monkey Coder to generate its own filesystem module."""
    registry = ProviderRegistry()
    await registry.initialize_all()
    executor = AgentExecutor(registry)
    
    # Generate operations.py
    print("Asking Monkey Coder to generate filesystem operations...")
    result = await executor.execute_agent_task(
        agent_type='developer',
        prompt='''Create a complete Python module for file system operations with these exact functions:

1. read_file(filepath: str) -> str
   - Safely read a file with path validation to prevent directory traversal
   - Use os.path.abspath and os.path.commonpath for safety
   - Handle encoding errors with 'replace' strategy
   - Add proper logging

2. write_file(filepath: str, content: str, create_backup: bool = True) -> None
   - Write content to file atomically using tempfile
   - Create backup of existing file if requested (copy2)
   - Use os.replace for atomic move
   - Ensure directory exists before writing

3. analyze_project_structure(root_path: str) -> dict
   - Detect project type (Python, Node.js, PHP, etc.)
   - Identify framework (Django, FastAPI, React, Vue, etc.)
   - Return dict with project_type, framework, and details

Include all helper functions, proper error handling, type hints, and logging setup.
The module should be complete and ready to use.''',
        provider='openai',
        model='gpt-4.1',
        max_tokens=4000
    )
    
    if result.get('status') == 'completed':
        return result.get('output', '')
    else:
        raise Exception(f"Generation failed: {result.get('error')}")

async def main():
    """Main function to generate and save the filesystem module."""
    try:
        # Generate the code
        print("=" * 60)
        print("MONKEY CODER GENERATING ITS OWN FILESYSTEM MODULE")
        print("=" * 60)
        
        code = await generate_filesystem_module()
        
        # Extract just the Python code if it's wrapped in markdown
        if '```python' in code:
            start = code.find('```python') + 9
            end = code.find('```', start)
            if end > start:
                code = code[start:end].strip()
        
        # Save to operations.py
        ops_path = Path('packages/core/monkey_coder/filesystem/operations.py')
        ops_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(ops_path, 'w') as f:
            f.write(code)
        
        print(f"\n✅ Generated and saved: {ops_path}")
        print(f"   Size: {len(code)} bytes")
        
        # Create proper __init__.py
        init_content = '''"""
Filesystem operations module for Monkey Coder.
Generated by Monkey Coder itself using GPT-4.1.
"""

from .operations import (
    read_file,
    write_file,
    analyze_project_structure,
)

__all__ = [
    "read_file",
    "write_file",
    "analyze_project_structure",
]
'''
        
        init_path = Path('packages/core/monkey_coder/filesystem/__init__.py')
        with open(init_path, 'w') as f:
            f.write(init_content)
        
        print(f"✅ Created: {init_path}")
        
        # Show a preview of the generated code
        print("\n" + "=" * 60)
        print("PREVIEW OF GENERATED CODE:")
        print("=" * 60)
        lines = code.split('\n')[:30]
        for line in lines:
            print(line)
        if len(code.split('\n')) > 30:
            print("... (truncated)")
        
        print("\n" + "=" * 60)
        print("SUCCESS! Monkey Coder has generated its own filesystem module!")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n❌ Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
name: Daily Billing Report to Stripe

on:
  schedule:
    # Run every day at 2:00 AM UTC (adjust timezone as needed)
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering for testing

jobs:
  report-usage:
    runs-on: ubuntu-latest
    
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      STRIPE_API_KEY: ${{ secrets.STRIPE_API_KEY }}
      PYTHON_PATH: /opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install asyncpg stripe pydantic fastapi httpx
          # Install project dependencies if requirements.txt exists
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Report daily usage to Stripe
        run: |
          python -c "
          import asyncio
          import sys
          import os
          
          # Add the packages directory to Python path
          sys.path.insert(0, './packages/core')
          
          from monkey_coder.billing.cron import report_daily_usage_to_stripe
          
          async def main():
              try:
                  result = await report_daily_usage_to_stripe()
                  print(f'Usage reporting completed: {result}')
                  
                  if not result.get('success', True):
                      print('WARNING: Usage reporting had errors:', result.get('errors', []))
                      # Don't fail the job for partial errors, just log them
                      
                  print(f'Processed {result.get(\"customers_processed\", 0)} customers')
                  print(f'Reported {result.get(\"total_usage_reported\", 0)} total tokens')
                  
              except Exception as e:
                  print(f'FATAL: Usage reporting failed: {e}')
                  sys.exit(1)
          
          asyncio.run(main())
          "
          
      - name: Update pricing data
        run: |
          python -c "
          import asyncio
          import sys
          import os
          
          # Add the packages directory to Python path  
          sys.path.insert(0, './packages/core')
          
          from monkey_coder.pricing.models import update_pricing_data
          
          async def main():
              try:
                  success = await update_pricing_data(force_update=False)
                  if success:
                      print('Pricing data update completed successfully')
                  else:
                      print('WARNING: Pricing data update failed')
                      
              except Exception as e:
                  print(f'WARNING: Pricing data update error: {e}')
                  # Don't fail the job if pricing update fails
          
          asyncio.run(main())
          "
          
      - name: Cleanup old usage events (weekly on Sundays)
        if: ${{ github.event.schedule == '0 2 * * 0' || github.event_name == 'workflow_dispatch' }}
        run: |
          python -c "
          import asyncio
          import sys
          import os
          from datetime import datetime
          
          # Add the packages directory to Python path
          sys.path.insert(0, './packages/core')
          
          from monkey_coder.billing.cron import cleanup_old_usage_events
          
          async def main():
              try:
                  # Keep 90 days of usage events (adjust as needed)
                  result = await cleanup_old_usage_events(days_to_keep=90)
                  print(f'Cleanup completed: {result}')
                  print(f'Deleted {result.get(\"events_deleted\", 0)} old usage events')
                  
              except Exception as e:
                  print(f'WARNING: Usage cleanup error: {e}')
                  # Don't fail the job if cleanup fails
          
          asyncio.run(main())
          "
          
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const issue = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Daily Billing Report Failed',
              body: `The daily billing report workflow failed on ${new Date().toISOString()}.
              
              **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              
              Please check the logs and ensure:
              - Database connection is working
              - Stripe API key is valid
              - All environment variables are set correctly
              
              This issue will be automatically closed when the next run succeeds.`,
              labels: ['bug', 'billing', 'cron']
            };
            
            // Check if there's already an open issue for billing failures
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'billing,cron',
              state: 'open'
            });
            
            if (existingIssues.data.length === 0) {
              await github.rest.issues.create(issue);
            }
            
      - name: Close success notification issue
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            // Close any open billing failure issues since this run succeeded
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'billing,cron',
              state: 'open'
            });
            
            for (const issue of existingIssues.data) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: 'The daily billing report is now working correctly. Closing this issue.'
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }

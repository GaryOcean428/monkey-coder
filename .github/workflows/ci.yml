name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  drift-and-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "UV_BIN=$HOME/.local/bin" >> $GITHUB_ENV
      - name: Add uv to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Python dependency drift check
        run: |
          ./scripts/check_python_deps_sync.sh || (echo "❌ Drift detected" && exit 1)
      - name: Install Node for markdown lint
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Install JS dependencies (for markdownlint)
        run: yarn install --frozen-lockfile --mode=skip-build
      - name: Documentation hygiene check
        run: |
          bash scripts/verify_docs.sh
      - name: Markdown lint
        run: yarn lint:md

  node:
    needs: drift-and-docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Lint
        run: yarn lint
      - name: Typecheck
        run: yarn typecheck
      - name: Test with coverage
        run: yarn test:coverage
      - name: Check coverage thresholds
        run: |
          echo "Checking coverage thresholds..."
          # Extract coverage percentages from coverage reports
          for workspace in packages/*/; do
            if [ -f "$workspace/coverage/coverage-summary.json" ]; then
              COVERAGE=$(node -e "const cov = require('./$workspace/coverage/coverage-summary.json'); console.log(Math.floor(cov.total.statements.pct))")
              echo "$workspace: ${COVERAGE}% statement coverage"
              if [ "$COVERAGE" -lt 10 ]; then
                echo "❌ Coverage below 10% threshold for $workspace"
                exit 1
              fi
            fi
          done
          echo "✅ All coverage thresholds met"
      - name: Upload JUnit reports
        uses: actions/upload-artifact@v4
        with:
          name: node-junit-reports
          path: '**/coverage/junit/*.xml'
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: node-coverage
          path: '**/coverage'
      - name: Add coverage comment to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let coverageReport = '## 📊 Test Coverage Report\n\n';
            coverageReport += '| Package | Statements | Branches | Functions | Lines |\n';
            coverageReport += '|---------|------------|----------|-----------|-------|\n';

            const workspaces = ['cli', 'sdk', 'web'];
            for (const workspace of workspaces) {
              const summaryPath = `packages/${workspace}/coverage/coverage-summary.json`;
              if (fs.existsSync(summaryPath)) {
                const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
                const total = summary.total;
                const statusIcon = total.statements.pct >= 70 ? '✅' : '❌';
                coverageReport += `| ${statusIcon} ${workspace} | ${total.statements.pct.toFixed(1)}% | ${total.branches.pct.toFixed(1)}% | ${total.functions.pct.toFixed(1)}% | ${total.lines.pct.toFixed(1)}% |\n`;
              }
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageReport
            });

  python:
    needs: drift-and-docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        working-directory: packages/core
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-junit
      - name: Run tests with coverage
        working-directory: packages/core
        run: pytest --cov=monkey_coder --cov-report=xml:coverage.xml --junitxml=junit.xml
      - name: Enforce Python coverage threshold
        working-directory: packages/core
        run: |
          THRESHOLD=20
          COV=$(python -c "import xml.etree.ElementTree as ET;\nimport sys;\nroot=ET.parse('coverage.xml').getroot();\nprint(int(float(root.get('line-rate','0'))*100))")
          echo "Python line coverage: ${COV}% (threshold ${THRESHOLD}%)"
          if [ "${COV}" -lt "${THRESHOLD}" ]; then
            echo "❌ Coverage below threshold (${THRESHOLD}%)" >&2
            exit 1
          fi
      - name: Upload JUnit report
        uses: actions/upload-artifact@v4
        with:
          name: python-junit-report
          path: packages/core/junit.xml
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage
          path: packages/core/coverage.xml

  quantum-tests:
    needs: python
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        working-directory: packages/core
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-junit
      - name: Run quantum tests
        working-directory: packages/core
        run: pytest tests/quantum --junitxml=quantum-junit.xml
      - name: Upload quantum JUnit report
        uses: actions/upload-artifact@v4
        with:
          name: quantum-junit-report
          path: packages/core/quantum-junit.xml

  coverage-summary:
    name: Consolidated Coverage & Test Summary
    needs: [node, python, quantum-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Download Node coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: node-coverage
          path: node-coverage
      - name: Download Python coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: python-coverage
          path: python-coverage
      - name: Download quantum JUnit artifact
        uses: actions/download-artifact@v4
        with:
          name: quantum-junit-report
          path: quantum-junit-report
      - name: Generate consolidated summary comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            function globSync(dir, suffix) {
              const out = [];
              function walk(d){
                for (const f of fs.readdirSync(d)) {
                  const p = path.join(d,f);
                  const st = fs.statSync(p);
                  if (st.isDirectory()) walk(p); else if (p.endsWith(suffix)) out.push(p);
                }
              }
              walk(dir); return out;
            }

            let body = '## 🧪 Consolidated Test & Coverage Summary\n\n';
            // Node coverage
            const nodeFiles = globSync('node-coverage', 'coverage-summary.json');
            if (nodeFiles.length) {
              body += '### Node Workspaces\n';
              body += '| Workspace | Statements | Branches | Functions | Lines |\n';
              body += '|-----------|------------|----------|-----------|-------|\n';
              for (const file of nodeFiles) {
                try {
                  const summary = JSON.parse(fs.readFileSync(file,'utf8'));
                  const total = summary.total;
                  const wsMatch = file.match(/packages\\/(.*?)\\//);
                  const ws = wsMatch ? wsMatch[1] : path.basename(path.dirname(file));
                  body += `| ${ws} | ${total.statements.pct.toFixed(1)}% | ${total.branches.pct.toFixed(1)}% | ${total.functions.pct.toFixed(1)}% | ${total.lines.pct.toFixed(1)}% |\n`;
                } catch(e) { /* ignore */ }
              }
              body += '\n';
            }

            // Python coverage
            const pyCov = 'python-coverage/coverage.xml';
            if (fs.existsSync(pyCov)) {
              const xml = fs.readFileSync(pyCov,'utf8');
              const m = xml.match(/line-rate="([0-9.]+)"/);
              if (m) {
                body += `### Python Core\nLine coverage: ${(parseFloat(m[1])*100).toFixed(1)}%\n\n`;
              }
            }

            // Quantum JUnit test counts
            const quantum = 'quantum-junit-report/packages/core/quantum-junit.xml';
            if (fs.existsSync(quantum)) {
              const x = fs.readFileSync(quantum,'utf8');
              const suiteMatch = x.match(/tests="(\d+)" failures="(\d+)" errors="(\d+)"/);
              if (suiteMatch) {
                const [_, tests, failures, errors] = suiteMatch;
                body += `### Quantum Tests\nTests: ${tests}, Failures: ${failures}, Errors: ${errors}\n\n`;
              }
            }

            body += '---\n_This summary is auto-generated._';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Lint
        run: yarn lint
      - name: Typecheck
        run: yarn typecheck
      - name: Test with coverage
        run: yarn test:coverage
      - name: Check coverage thresholds
        run: |
          echo "Checking coverage thresholds..."
          # Extract coverage percentages from coverage reports
          for workspace in packages/*/; do
            if [ -f "$workspace/coverage/coverage-summary.json" ]; then
              COVERAGE=$(node -e "const cov = require('./$workspace/coverage/coverage-summary.json'); console.log(Math.floor(cov.total.statements.pct))")
              echo "$workspace: ${COVERAGE}% statement coverage"
              if [ "$COVERAGE" -lt 70 ]; then
                echo "‚ùå Coverage below 70% threshold for $workspace"
                exit 1
              fi
            fi
          done
          echo "‚úÖ All coverage thresholds met"
      - name: Upload JUnit reports
        uses: actions/upload-artifact@v4
        with:
          name: node-junit-reports
          path: '**/coverage/junit/*.xml'
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: node-coverage
          path: '**/coverage'
      - name: Add coverage comment to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let coverageReport = '## üìä Test Coverage Report\n\n';
            coverageReport += '| Package | Statements | Branches | Functions | Lines |\n';
            coverageReport += '|---------|------------|----------|-----------|-------|\n';

            const workspaces = ['cli', 'sdk', 'web'];
            for (const workspace of workspaces) {
              const summaryPath = `packages/${workspace}/coverage/coverage-summary.json`;
              if (fs.existsSync(summaryPath)) {
                const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
                const total = summary.total;
                const statusIcon = total.statements.pct >= 70 ? '‚úÖ' : '‚ùå';
                coverageReport += `| ${statusIcon} ${workspace} | ${total.statements.pct.toFixed(1)}% | ${total.branches.pct.toFixed(1)}% | ${total.functions.pct.toFixed(1)}% | ${total.lines.pct.toFixed(1)}% |\n`;
              }
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageReport
            });

  python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        working-directory: packages/core
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-junit
      - name: Run tests with coverage
        working-directory: packages/core
        run: pytest --cov=monkey_coder --cov-report=xml:coverage.xml --junitxml=junit.xml
      - name: Upload JUnit report
        uses: actions/upload-artifact@v4
        with:
          name: python-junit-report
          path: packages/core/junit.xml
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage
          path: packages/core/coverage.xml

  quantum-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        working-directory: packages/core
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-junit
      - name: Run quantum tests
        working-directory: packages/core
        run: pytest tests/quantum --junitxml=quantum-junit.xml
      - name: Upload quantum JUnit report
        uses: actions/upload-artifact@v4
        with:
          name: quantum-junit-report
          path: packages/core/quantum-junit.xml

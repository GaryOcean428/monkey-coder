name: 🚂 Railway Deployment Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deployment_url:
        description: 'Deployment URL to test'
        required: false
        default: 'https://coder.fastmonkey.au'

jobs:
  # Phase 3.1: Pre-Deployment Configuration Validation
  validate-railway-config:
    name: Validate Railway Configuration
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Railway configuration validation
      id: config-validation
      run: |
        echo "🔍 Running Railway configuration validation..."
        chmod +x scripts/railway-debug.sh
        
        # Run validation and capture output
        if ./scripts/railway-debug.sh --verbose > railway-validation.log 2>&1; then
          echo "validation_status=success" >> $GITHUB_OUTPUT
          echo "✅ Railway configuration validation passed"
        else
          echo "validation_status=failed" >> $GITHUB_OUTPUT
          echo "❌ Railway configuration validation failed"
          cat railway-validation.log
          exit 1
        fi

    - name: Upload validation report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: railway-validation-report
        path: |
          railway-validation.log
          railway-debug-report.json
        retention-days: 30

    - name: Create validation summary
      if: always()
      run: |
        echo "## 🔍 Railway Configuration Validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.config-validation.outputs.validation_status }}" == "success" ]; then
          echo "✅ **Status:** All Railway configurations are valid" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Validated Configurations:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ railpack.json (Frontend)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ railpack-backend.json (Backend API)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ railpack-ml.json (ML Service)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status:** Configuration validation failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please review the validation log for details." >> $GITHUB_STEP_SUMMARY
        fi

  deployment-health-check:
    name: Railway Deployment Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate-railway-config

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq

    - name: Set deployment URL
      run: |
        if [ -n "${{ github.event.inputs.deployment_url }}" ]; then
          echo "DEPLOYMENT_URL=${{ github.event.inputs.deployment_url }}" >> $GITHUB_ENV
        else
          echo "DEPLOYMENT_URL=https://coder.fastmonkey.au" >> $GITHUB_ENV
        fi

    - name: Wait for deployment to be ready
      run: |
        echo "Waiting for deployment to be ready..."
        for i in {1..30}; do
          if curl -f -s "$DEPLOYMENT_URL/health" > /dev/null; then
            echo "Deployment is ready!"
            break
          fi
          echo "Attempt $i: Waiting for deployment..."
          sleep 10
        done

    # Phase 3.1: Comprehensive Smoke Testing
    - name: Run comprehensive smoke tests
      id: smoke-tests
      run: |
        echo "🧪 Running comprehensive Railway smoke tests..."
        chmod +x scripts/railway-smoke-test.py
        
        # Run smoke tests with JSON output
        if python3 scripts/railway-smoke-test.py \
          --base-url "$DEPLOYMENT_URL" \
          --timeout 30 \
          --output smoke-test-results.json \
          --verbose; then
          echo "smoke_test_status=success" >> $GITHUB_OUTPUT
          echo "✅ Smoke tests passed"
        else
          echo "smoke_test_status=failed" >> $GITHUB_OUTPUT
          echo "❌ Smoke tests failed"
          exit 1
        fi
      env:
        DEPLOYMENT_URL: ${{ env.DEPLOYMENT_URL }}
      continue-on-error: true

    - name: Upload smoke test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: smoke-test-results
        path: |
          smoke-test-results.json
          railway-smoke-test.json
        retention-days: 30

    - name: Parse and display smoke test results
      if: always()
      run: |
        echo "## 🧪 Smoke Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "smoke-test-results.json" ]; then
          # Extract summary using jq
          total=$(jq -r '.summary.total // 0' smoke-test-results.json)
          passed=$(jq -r '.summary.passed // 0' smoke-test-results.json)
          failed=$(jq -r '.summary.failed // 0' smoke-test-results.json)
          skipped=$(jq -r '.summary.skipped // 0' smoke-test-results.json)
          duration=$(jq -r '.summary.duration_ms // 0' smoke-test-results.json)
          
          echo "### Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Tests:** $total" >> $GITHUB_STEP_SUMMARY
          echo "- **Passed:** $passed ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed:** $failed ❌" >> $GITHUB_STEP_SUMMARY
          echo "- **Skipped:** $skipped ⏭️" >> $GITHUB_STEP_SUMMARY
          echo "- **Duration:** ${duration}ms" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Display failed tests if any
          if [ "$failed" -gt 0 ]; then
            echo "### Failed Tests" >> $GITHUB_STEP_SUMMARY
            jq -r '.tests[] | select(.status == "fail") | "- ❌ **\(.test_name)** (\(.service)): \(.message)"' smoke-test-results.json >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⚠️ Smoke test results file not found" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Run Railway deployment verification (legacy)
      run: |
        if [ -f ./verify_railway_deployment.sh ]; then
          chmod +x ./verify_railway_deployment.sh
          ./verify_railway_deployment.sh
        else
          echo "⚠️ Legacy verification script not found, skipping"
        fi
      env:
        DEPLOYMENT_URL: ${{ env.DEPLOYMENT_URL }}
        TIMEOUT: 45
      continue-on-error: true

    - name: Performance benchmarking
      run: |
        echo "Running performance tests..."
        
        # Test response times
        total_time=0
        count=0
        for i in {1..5}; do
          start_time=$(date +%s%N)
          if curl -f -s "$DEPLOYMENT_URL/health" > /dev/null 2>&1; then
            end_time=$(date +%s%N)
            duration=$((($end_time - $start_time) / 1000000))
            echo "Health endpoint response time: ${duration}ms"
            total_time=$((total_time + duration))
            count=$((count + 1))
          fi
        done
        
        if [ $count -gt 0 ]; then
          avg_time=$((total_time / count))
          echo "Average response time: ${avg_time}ms"
          echo "AVERAGE_RESPONSE_TIME=${avg_time}" >> $GITHUB_ENV
        fi

    - name: Test deployment status badges
      run: |
        echo "Testing deployment status..."
        
        # Create status badge data
        if curl -f -s "$DEPLOYMENT_URL/health" | jq -r '.status' | grep -q "healthy"; then
          echo "DEPLOYMENT_STATUS=healthy" >> $GITHUB_ENV
          echo "BADGE_COLOR=brightgreen" >> $GITHUB_ENV
        else
          echo "DEPLOYMENT_STATUS=unhealthy" >> $GITHUB_ENV
          echo "BADGE_COLOR=red" >> $GITHUB_ENV
        fi

    - name: Create deployment status summary
      if: always()
      run: |
        echo "## 🚂 Railway Deployment Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment URL:** $DEPLOYMENT_URL" >> $GITHUB_STEP_SUMMARY
        echo "**Test Time:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        config_status="${{ needs.validate-railway-config.result }}"
        smoke_status="${{ steps.smoke-tests.outputs.smoke_test_status }}"
        
        if [ "$config_status" == "success" ] && [ "$smoke_status" == "success" ]; then
          echo "✅ **Status:** All health checks passed" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Result:** Deployment is ready for production traffic" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status:** Health checks failed" >> $GITHUB_STEP_SUMMARY
          echo "🔧 **Result:** Deployment issues detected - review logs" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Configuration Validation:** ${config_status}" >> $GITHUB_STEP_SUMMARY
        echo "- **Smoke Tests:** ${smoke_status}" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "$AVERAGE_RESPONSE_TIME" ]; then
          echo "- **Average Response Time:** ${AVERAGE_RESPONSE_TIME}ms" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Health Check]($DEPLOYMENT_URL/health)" >> $GITHUB_STEP_SUMMARY
        echo "- [API Documentation]($DEPLOYMENT_URL/api/docs)" >> $GITHUB_STEP_SUMMARY
        echo "- [Metrics]($DEPLOYMENT_URL/metrics)" >> $GITHUB_STEP_SUMMARY

  # Phase 3.3: PR Comment Reporting
  report-to-pr:
    name: Report Results to PR
    runs-on: ubuntu-latest
    needs: [validate-railway-config, deployment-health-check]
    if: always() && github.event_name == 'pull_request'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
      continue-on-error: true

    - name: Create PR comment
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Determine overall status
          const configStatus = '${{ needs.validate-railway-config.result }}';
          const healthCheckStatus = '${{ needs.deployment-health-check.result }}';
          const overallSuccess = configStatus === 'success' && healthCheckStatus === 'success';
          
          // Build comment body
          let commentBody = '## 🚂 Railway Deployment Test Results\n\n';
          commentBody += `**Overall Status:** ${overallSuccess ? '✅ PASSED' : '❌ FAILED'}\n\n`;
          
          // Configuration validation results
          commentBody += '### 🔍 Configuration Validation\n';
          commentBody += `**Status:** ${configStatus === 'success' ? '✅ Passed' : '❌ Failed'}\n\n`;
          
          if (configStatus === 'success') {
            commentBody += '- ✅ railpack.json (Frontend)\n';
            commentBody += '- ✅ railpack-backend.json (Backend API)\n';
            commentBody += '- ✅ railpack-ml.json (ML Service)\n\n';
          }
          
          // Smoke test results
          commentBody += '### 🧪 Smoke Test Results\n';
          commentBody += `**Status:** ${healthCheckStatus === 'success' ? '✅ Passed' : '❌ Failed'}\n\n';
          
          // Try to read smoke test results
          try {
            const resultsPath = path.join('artifacts', 'smoke-test-results', 'smoke-test-results.json');
            if (fs.existsSync(resultsPath)) {
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              const summary = results.summary || {};
              
              commentBody += `- **Total Tests:** ${summary.total || 0}\n`;
              commentBody += `- **Passed:** ${summary.passed || 0} ✅\n`;
              commentBody += `- **Failed:** ${summary.failed || 0} ❌\n`;
              commentBody += `- **Duration:** ${(summary.duration_ms || 0).toFixed(2)}ms\n\n`;
              
              // List failed tests if any
              if (results.tests && results.tests.some(t => t.status === 'fail')) {
                commentBody += '#### Failed Tests:\n';
                results.tests
                  .filter(t => t.status === 'fail')
                  .forEach(test => {
                    commentBody += `- ❌ **${test.test_name}** (${test.service}): ${test.message}\n`;
                  });
                commentBody += '\n';
              }
            }
          } catch (error) {
            commentBody += '_Smoke test details not available_\n\n';
          }
          
          // Performance metrics
          commentBody += '### ⚡ Performance Metrics\n';
          commentBody += '_Performance benchmarking completed - see job logs for details_\n\n';
          
          // Next steps
          if (!overallSuccess) {
            commentBody += '### 🔧 Next Steps\n';
            commentBody += '1. Review the failed tests above\n';
            commentBody += '2. Check Railway configuration files\n';
            commentBody += '3. Verify environment variables are set correctly\n';
            commentBody += '4. Review deployment logs for errors\n\n';
          }
          
          // Links
          commentBody += '### 📚 Resources\n';
          commentBody += `- [Workflow Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
          commentBody += '- [Railway Deployment Guide](../blob/main/RAILWAY_DEPLOYMENT_GUIDE.md)\n';
          commentBody += '- [Railway Debug Guide](../blob/main/RAILWAY_DEBUG_GUIDE.md)\n';
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('🚂 Railway Deployment Test Results')
          );
          
          // Create or update comment
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }

  notify-deployment-status:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate-railway-config, deployment-health-check]
    if: always()

    steps:
    - name: Set status variables
      run: |
        config_result="${{ needs.validate-railway-config.result }}"
        health_result="${{ needs.deployment-health-check.result }}"
        
        if [ "$config_result" == "success" ] && [ "$health_result" == "success" ]; then
          echo "STATUS=✅ Healthy" >> $GITHUB_ENV
          echo "COLOR=28a745" >> $GITHUB_ENV
        else
          echo "STATUS=❌ Unhealthy" >> $GITHUB_ENV
          echo "COLOR=d73a49" >> $GITHUB_ENV
        fi

    - name: Update deployment status badge
      run: |
        echo "Deployment status: $STATUS"
        echo "Badge color: $COLOR"
        echo "Config validation: ${{ needs.validate-railway-config.result }}"
        echo "Health check: ${{ needs.deployment-health-check.result }}"
        # This could be used to update a status badge service
        # For example, shields.io endpoint badges

  railway-logs-check:
    name: Railway Logs Analysis
    runs-on: ubuntu-latest
    if: failure()

    steps:
    - name: Analyze potential deployment issues
      run: |
        echo "## 🔍 Deployment Troubleshooting Guide" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "If the deployment verification failed, check these common issues:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Railway CLI Commands" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# Check deployment logs" >> $GITHUB_STEP_SUMMARY
        echo "railway logs --service monkey-coder --tail" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Monitor deployment status" >> $GITHUB_STEP_SUMMARY
        echo "railway status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Force redeploy" >> $GITHUB_STEP_SUMMARY
        echo "railway up --force" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Check environment variables" >> $GITHUB_STEP_SUMMARY
        echo "railway variables" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Common Issues" >> $GITHUB_STEP_SUMMARY
        echo "- **Health endpoint not responding:** Check if the server started correctly" >> $GITHUB_STEP_SUMMARY
        echo "- **Static assets missing:** Verify Next.js build completed successfully" >> $GITHUB_STEP_SUMMARY
        echo "- **API endpoints failing:** Check environment variables and provider configurations" >> $GITHUB_STEP_SUMMARY
        echo "- **Performance issues:** Review resource allocation and optimize queries" >> $GITHUB_STEP_SUMMARY
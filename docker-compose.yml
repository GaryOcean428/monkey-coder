version: '3.8'

services:
  # Core application service
  core:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PORT: 8000
    container_name: monkey-coder-core
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - HOST=0.0.0.0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - E2B_API_KEY=${E2B_API_KEY}
      - BROWSERBASE_API_KEY=${BROWSERBASE_API_KEY}
      - BROWSERBASE_PROJECT_ID=${BROWSERBASE_PROJECT_ID}
      - SANDBOX_TOKEN_SECRET=${SANDBOX_TOKEN_SECRET:-dev-secret-change-me}
      - DATABASE_URL=postgresql://user:password@postgres:5432/monkey_coder
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
      - sandbox
    networks:
      - monkey-coder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Sandbox service with E2B/BrowserBase integration
  sandbox:
    build:
      context: .
      dockerfile: services/sandbox/Dockerfile
      args:
        PORT: 8001
    container_name: monkey-coder-sandbox
    ports:
      - "8001:8001"
    environment:
      - PORT=8001
      - HOST=0.0.0.0
      - E2B_API_KEY=${E2B_API_KEY}
      - BROWSERBASE_API_KEY=${BROWSERBASE_API_KEY}
      - BROWSERBASE_PROJECT_ID=${BROWSERBASE_PROJECT_ID}
      - SANDBOX_TOKEN_SECRET=${SANDBOX_TOKEN_SECRET:-dev-secret-change-me}
      - SANDBOX_MAX_MEMORY_MB=512
      - SANDBOX_MAX_CPU_PERCENT=50.0
      - SANDBOX_MAX_DISK_MB=1024
      - DISPLAY=:99
    volumes:
      - sandbox-workspace:/sandbox/volumes/workspace
      - sandbox-temp:/sandbox/volumes/temp
      - sandbox-logs:/sandbox/volumes/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For Docker-in-Docker if needed
    networks:
      - monkey-coder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/sandbox/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Security constraints
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: false  # Sandbox needs write access
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: monkey-coder-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=monkey_coder
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - monkey-coder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d monkey_coder"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: monkey-coder-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - monkey-coder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: monkey-coder-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - monkey-coder-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: monkey-coder-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - monkey-coder-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  monkey-coder-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  sandbox-workspace:
    driver: local
  sandbox-temp:
    driver: local
  sandbox-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

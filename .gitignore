# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

.DS_Store
.gitconfig

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
# Preserve frontend lib directory, ignore Python lib directories
packages/core/lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST


# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.env.local
.env.development
.env.test
.env.production
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.virtualenv/
virtualenv/
pipenv/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Yarn-only rule: exclude npm and pnpm lock files
package-lock.json
pnpm-lock.yaml

# Node.js dependencies
node_modules/

# Next.js build output
.next/
# Don't ignore out/ - we need it for deployment
# out/
# packages/web/out/
packages/web/.next/

# Next.js cache and build artifacts
.next/cache/
.vercel/
*.tsbuildinfo
next-env.d.ts

# TypeScript build output
*.tsbuildinfo

# Yarn Berry
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions

# Specifically ignore yarn cache and install state
.yarn/cache
.yarn/install-state.gz

# Security & Compliance
# Coverage reports and test outputs
coverage/
*.lcov
jest-coverage/
nyc_output/
.nyc_output/

# Lock files (prefer yarn.lock)
composer.lock
Gemfile.lock
poetry.lock
Pipfile.lock

# Environment files and secrets
.env.local
.env.development.local
.env.test.local
.env.production.local
.env.staging
.env.production
.secrets
secrets.json

# NPM and PyPI tokens
.npmrc
*.pypirc

# Railway tokens and config
.railway/
railway.json

# API Keys and service credentials
**/api_keys.txt
**/service-account.json
**/credentials.json

# Security scan reports
*-audit-report.json
*-security-report.json
safety-report.json
bandit-report.json
semgrep-report.json
npm-audit-report.json

# MFA and authentication tokens
.authenticator
.mfa
.tokens

# SSL certificates and keys
*.pem
*.key
*.cert
*.crt
*.p12
*.pfx

# Database and configuration backups
*.sql
*.db
*.sqlite
*.sqlite3
config-backup.*
# Dev container files should be committed

# Disallow Docker artifacts (force Railpack detection)
# NOTE: We explicitly allow the sandbox service Dockerfile to be tracked
Dockerfile
**/Dockerfile
docker-compose.yml
**/docker-compose*.yml
docker/
**/docker/
scripts/test-docker-build.sh

# Exceptions: keep sandbox service Dockerfile and docker assets tracked
!services/sandbox/Dockerfile
!services/sandbox/docker/**

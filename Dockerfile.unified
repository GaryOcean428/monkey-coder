# Multi-stage Dockerfile for unified Monkey Coder deployment
# Stage 1: Build Next.js frontend
FROM node:18-alpine AS frontend-builder

# Set working directory
WORKDIR /app

# Copy package files for better caching
COPY package.json yarn.lock ./
COPY packages/web/package.json ./packages/web/
COPY .yarnrc.yml ./
COPY .yarn ./.yarn

# Enable Corepack for Yarn 4.9.2 support
RUN corepack enable

# Install dependencies
RUN yarn install --frozen-lockfile

# Copy web package source
COPY packages/web ./packages/web

# Build Next.js for static export
WORKDIR /app/packages/web
RUN yarn build

# Stage 2: Python backend with frontend assets
FROM python:3.11-slim AS production

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Create app directory and user
RUN groupadd -r appuser && useradd -r -g appuser appuser
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    git \
    build-essential \
    nodejs \
    npm \
    && rm -rf /var/lib/apt/lists/*

# Copy frontend build output from previous stage
COPY --from=frontend-builder /app/packages/web/out ./packages/web/out

# Copy Python core package
COPY packages/core/ ./packages/core/

# Install Python dependencies
WORKDIR /app/packages/core
RUN pip install -e .

# Change ownership to non-root user
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Set working directory back to app root
WORKDIR /app

# Expose dynamic port from environment
ARG PORT
ENV PORT=${PORT:-8000}
EXPOSE ${PORT}

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Start the application
CMD ["python", "-m", "packages.core.monkey_coder.app.main"]
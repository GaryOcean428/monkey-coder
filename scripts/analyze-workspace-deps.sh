#!/bin/bash
# Workspace dependency analyzer
# Generates Mermaid diagram of package dependencies

OUTPUT_FILE="docs/WORKSPACE_DEPENDENCIES.md"

cat > "${OUTPUT_FILE}" << 'EOF'
# Workspace Dependencies

> Auto-generated by `scripts/analyze-workspace-deps.sh`
> Last updated: $(date)

## Package Dependency Graph

```mermaid
graph TD
    CLI[monkey-coder-cli<br/>TypeScript CLI]
    SDK[monkey-coder-sdk<br/>TS/Python SDK]
    WEB[monkey-coder-web<br/>Next.js Frontend]
    CORE[monkey-coder-core<br/>Python Backend]
    
    CLI -->|API calls| CORE
    WEB -->|API calls| CORE
    SDK -->|Wraps| CORE
    CLI -->|Uses| SDK
    WEB -->|Uses| SDK
    
    style CLI fill:#42a5f5
    style SDK fill:#66bb6a
    style WEB fill:#ab47bc
    style CORE fill:#ff7043
```

## Package Details

EOF

# Get workspace information
yarn workspaces list --json | jq -r '"\(.name) - \(.location)"' >> "${OUTPUT_FILE}"

cat >> "${OUTPUT_FILE}" << 'EOF'

## Cross-Package Dependencies

EOF

# Analyze package.json dependencies
for pkg in packages/*/package.json; do
    PKG_NAME=$(jq -r '.name' "${pkg}")
    echo "### ${PKG_NAME}" >> "${OUTPUT_FILE}"
    echo "" >> "${OUTPUT_FILE}"
    
    # Extract workspace dependencies
    WORKSPACE_DEPS=$(jq -r '.dependencies // {} | to_entries[] | select(.value | startswith("workspace:")) | .key' "${pkg}")
    
    if [ -n "${WORKSPACE_DEPS}" ]; then
        echo "**Dependencies:**" >> "${OUTPUT_FILE}"
        echo "${WORKSPACE_DEPS}" | while read dep; do
            echo "- \`${dep}\`" >> "${OUTPUT_FILE}"
        done
    else
        echo "No internal workspace dependencies" >> "${OUTPUT_FILE}"
    fi
    
    echo "" >> "${OUTPUT_FILE}"
done

echo "âœ… Dependency graph generated: ${OUTPUT_FILE}"
